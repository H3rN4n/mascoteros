{
  "name": "imsave",
  "version": "2.0.0",
  "description": "Imgur image upload",
  "keywords": [],
  "dependencies": {
    "concat-stream": "~1.0.0",
    "promise": "~3.1.0",
    "hyperquest": "~0.1.6",
    "form-data": "0.0.10"
  },
  "devDependencies": {
    "mocha": "*",
    "browserify-middleware": "*",
    "express": "*"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/imsave.git"
  },
  "browser": {
    "./lib/post.js": "./lib/post-browser.js"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# imsave\r\n\r\nImgur image upload for node.js and the browser (via browserify).\r\n\r\n[![Build Status](https://travis-ci.org/ForbesLindesay/imsave.png?branch=master)](https://travis-ci.org/ForbesLindesay/imsave)\r\n[![Dependency Status](https://gemnasium.com/ForbesLindesay/imsave.png)](https://gemnasium.com/ForbesLindesay/imsave)\r\n[![NPM version](https://badge.fury.io/js/imsave.png)](http://badge.fury.io/js/imsave)\r\n\r\n## Installation\r\n\r\nTo install, use:\r\n\r\n    npm install imsave\r\n\r\nYou must then also acquire a ClientID from https://api.imgur.com/oauth2/addclient\r\n\r\n## Sever Usage\r\n\r\n```js\r\nvar imgur = require('imsave')('ClientID')\r\n\r\nimgur(fs.readFileSync('image.jpeg'), function (err, url) {\r\n  if (err) throw err\r\n  console.log('URL for image: ' + url)\r\n})\r\n\r\n//or\r\n\r\nimgur(fs.createReadStream('image.jpeg'), function (err, url) {\r\n  if (err) throw err\r\n  console.log('URL for image: ' + url)\r\n})\r\n```\r\n\r\n## Client Usage\r\n\r\nUsing Browserify\r\n\r\n```html\r\n<input id=\"pictureIn\" type=\"file\" />\r\n<img id=\"pictureOut\"/>\r\n<button id=\"submit\">Upload</button>\r\n```\r\n\r\n```js\r\nvar imgur = require('imsave')('ClientID')\r\n\r\nvar submit = document.getElementById('submit')\r\nvar input = document.getElementById('pictureIn')\r\nvar output = document.getElementById('pictureOut')\r\n\r\nsubmit.addEventListener('click', function () {\r\n  imgur(input.files[0], function (err, res) {\r\n    if (err) throw err //handle error here\r\n    output.src = res\r\n  })\r\n}, false)\r\n```\r\n\r\n## Promises\r\n\r\nIf the callback is omitted, a [Promises/A+](http://promises-aplus.github.io/promises-spec/) promise is returned.  This is very useful for composing multiple asynchronous operations, especially if they are in parallel.\r\n\r\n## License\r\n\r\n  MIT",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/imsave/issues"
  },
  "_id": "imsave@2.0.0",
  "dist": {
    "shasum": "f636d21a702e45fb7a862bc7be5a052fdee880a9",
    "tarball": "http://registry.npmjs.org/imsave/-/imsave-2.0.0.tgz"
  },
  "_from": "imsave@",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "forbeslindesay",
    "email": "forbes@lindesay.co.uk"
  },
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    }
  ],
  "directories": {},
  "_shasum": "f636d21a702e45fb7a862bc7be5a052fdee880a9",
  "_resolved": "https://registry.npmjs.org/imsave/-/imsave-2.0.0.tgz",
  "homepage": "https://github.com/ForbesLindesay/imsave"
}
